using HerrGeneral.WriteSide.DDD;

namespace HerrGeneral.Core.DDD;

/// <summary>
/// Internal adapter that bridges domain-specific DDD event handlers with the generic write-side interface.
/// This class encapsulates the logic for processing aggregates and propagating events.
/// </summary>
/// <typeparam name="TEvent">The type of event to handle</typeparam>
/// <typeparam name="THandler">The type of domain-specific event handler</typeparam>
/// <typeparam name="TAggregate">The type of aggregate involved in the event</typeparam>
/// <param name="handler">The domain-specific event handler that processes the event</param>
/// <param name="repository">The repository responsible for aggregate persistence</param>
internal class EventHandlerInternal<TEvent, THandler, TAggregate>(
    THandler handler,
    IAggregateRepository<TAggregate> repository) : HerrGeneral.WriteSide.IEventHandler<TEvent>
    where THandler : IEventHandler<TEvent, TAggregate>
    where TAggregate : Aggregate<TAggregate>
{
    /// <summary>
    /// Handles the event by delegating to the domain handler, then saves modified aggregates
    /// and collects newly generated events for propagation.
    /// </summary>
    /// <param name="notification">The event to handle</param>
    /// <returns>The collection of events generated by the processing that should be propagated</returns>
    public IEnumerable<object> Handle(TEvent notification)
    {
        var eventsToDispatch = new List<object>();

        foreach (var aggregate in handler.Handle(notification))
        {
            repository.Save(aggregate);
            eventsToDispatch.AddRange(aggregate.NewEvents);
            aggregate.ClearNewEvents();
        }

        return eventsToDispatch;
    }
}